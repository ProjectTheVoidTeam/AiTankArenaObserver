// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AiTankArenaServer {

  /// <summary>Holder for reflection information generated from game.proto</summary>
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnYW1lLnByb3RvEhFBaVRhbmtBcmVuYVNlcnZlchoLc2hhcmUucHJvdG8i",
            "vwEKBlBsYXllchIKCgJpZBgBIAEoDRIMCgRuYW1lGAIgASgJEg8KB2lzUmVh",
            "ZHkYAyABKAgSFAoMc3Bhd25Qb2ludElkGAQgASgNEisKBHR5cGUYBiABKA4y",
            "HS5BaVRhbmtBcmVuYVNlcnZlci5QbGF5ZXJUeXBlEg4KBnRhbmtJZBgHIAEo",
            "DRI3Cg1wbGF5ZXJSZXN1bHRzGAUgASgLMiAuQWlUYW5rQXJlbmFTZXJ2ZXIu",
            "UGxheWVyUmVzdWx0cyJhCg1QbGF5ZXJSZXN1bHRzEhAKCGlzV2lubmVyGAEg",
            "ASgIEgwKBGtpbGwYAiABKAUSDQoFZGVhdGgYAyABKAUSEQoJYXNzaXN0YW50",
            "GAQgASgFEg4KBmRhbWFnZRgFIAEoBSKVAQoEVGFuaxIKCgJpZBgBIAEoDRIo",
            "CgNwb3MYAiABKAsyGy5BaVRhbmtBcmVuYVNlcnZlci5WZWN0b3IyRBIuCglk",
            "aXJlY3Rpb24YAyABKAsyGy5BaVRhbmtBcmVuYVNlcnZlci5WZWN0b3IyRBIn",
            "CgZoaXRib3gYBCABKAsyFy5BaVRhbmtBcmVuYVNlcnZlci5SZWN0InAKBldl",
            "YXBvbhIKCgJpZBgBIAEoDRIrCgR0eXBlGAIgASgOMh0uQWlUYW5rQXJlbmFT",
            "ZXJ2ZXIuV2VhcG9uVHlwZRItCgVzdGF0ZRgDIAEoDjIeLkFpVGFua0FyZW5h",
            "U2VydmVyLldlYXBvblN0YXRlIqMBCgpQcm9qZWN0aW9uEgoKAmlkGAEgASgN",
            "EigKA3BvcxgCIAEoCzIbLkFpVGFua0FyZW5hU2VydmVyLlZlY3RvcjJEEi4K",
            "CWRpcmVjdGlvbhgDIAEoCzIbLkFpVGFua0FyZW5hU2VydmVyLlZlY3RvcjJE",
            "Ei8KBHR5cGUYBCABKA4yIS5BaVRhbmtBcmVuYVNlcnZlci5Qcm9qZWN0aW9u",
            "VHlwZSonCgpQbGF5ZXJUeXBlEgsKB1dBUlJJT1IQABIMCghPQlNFUlZFUhAB",
            "KhgKCldlYXBvblR5cGUSCgoGQ0FOTk9OEAAqMgoLV2VhcG9uU3RhdGUSCAoE",
            "SURMRRAAEgoKBkFDVElWRRABEg0KCUNPT0xfRE9XThACKhoKDlByb2plY3Rp",
            "b25UeXBlEggKBEJBTEwQAEI2CjJjbi50ZWFtdGhldm9pZC5BaVRhbmtBcmVu",
            "YVNlcnZlci5tZXNzYWdlLm9wZXJhdGlvblABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AiTankArenaServer.ShareReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AiTankArenaServer.PlayerType), typeof(global::AiTankArenaServer.WeaponType), typeof(global::AiTankArenaServer.WeaponState), typeof(global::AiTankArenaServer.ProjectionType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.Player), global::AiTankArenaServer.Player.Parser, new[]{ "Id", "Name", "IsReady", "SpawnPointId", "Type", "TankId", "PlayerResults" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.PlayerResults), global::AiTankArenaServer.PlayerResults.Parser, new[]{ "IsWinner", "Kill", "Death", "Assistant", "Damage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.Tank), global::AiTankArenaServer.Tank.Parser, new[]{ "Id", "Pos", "Direction", "Hitbox" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.Weapon), global::AiTankArenaServer.Weapon.Parser, new[]{ "Id", "Type", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.Projection), global::AiTankArenaServer.Projection.Parser, new[]{ "Id", "Pos", "Direction", "Type" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///玩家类型
  /// </summary>
  public enum PlayerType {
    /// <summary>
    ///能够行动的坦克操作者 一般为AI
    /// </summary>
    [pbr::OriginalName("WARRIOR")] Warrior = 0,
    /// <summary>
    ///不能行动的观察者
    /// </summary>
    [pbr::OriginalName("OBSERVER")] Observer = 1,
  }

  public enum WeaponType {
    [pbr::OriginalName("CANNON")] Cannon = 0,
  }

  public enum WeaponState {
    /// <summary>
    ///武器空闲中
    /// </summary>
    [pbr::OriginalName("IDLE")] Idle = 0,
    /// <summary>
    ///武器已被触发 例如 开炮中
    /// </summary>
    [pbr::OriginalName("ACTIVE")] Active = 1,
    /// <summary>
    ///武器冷却中
    /// </summary>
    [pbr::OriginalName("COOL_DOWN")] CoolDown = 2,
  }

  public enum ProjectionType {
    /// <summary>
    ///炮弹球?
    /// </summary>
    [pbr::OriginalName("BALL")] Ball = 0,
  }

  #endregion

  #region Messages
  /// <summary>
  ///游戏玩家
  /// </summary>
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.GameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      isReady_ = other.isReady_;
      spawnPointId_ = other.spawnPointId_;
      type_ = other.type_;
      tankId_ = other.tankId_;
      playerResults_ = other.playerResults_ != null ? other.playerResults_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///玩家的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isReady" field.</summary>
    public const int IsReadyFieldNumber = 3;
    private bool isReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    /// <summary>Field number for the "spawnPointId" field.</summary>
    public const int SpawnPointIdFieldNumber = 4;
    private uint spawnPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnPointId {
      get { return spawnPointId_; }
      set {
        spawnPointId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::AiTankArenaServer.PlayerType type_ = global::AiTankArenaServer.PlayerType.Warrior;
    /// <summary>
    ///玩家类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.PlayerType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tankId" field.</summary>
    public const int TankIdFieldNumber = 7;
    private uint tankId_;
    /// <summary>
    ///玩家所控制的坦克的id,将来可能控制多个坦克
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TankId {
      get { return tankId_; }
      set {
        tankId_ = value;
      }
    }

    /// <summary>Field number for the "playerResults" field.</summary>
    public const int PlayerResultsFieldNumber = 5;
    private global::AiTankArenaServer.PlayerResults playerResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.PlayerResults PlayerResults {
      get { return playerResults_; }
      set {
        playerResults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (IsReady != other.IsReady) return false;
      if (SpawnPointId != other.SpawnPointId) return false;
      if (Type != other.Type) return false;
      if (TankId != other.TankId) return false;
      if (!object.Equals(PlayerResults, other.PlayerResults)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      if (SpawnPointId != 0) hash ^= SpawnPointId.GetHashCode();
      if (Type != global::AiTankArenaServer.PlayerType.Warrior) hash ^= Type.GetHashCode();
      if (TankId != 0) hash ^= TankId.GetHashCode();
      if (playerResults_ != null) hash ^= PlayerResults.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsReady != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReady);
      }
      if (SpawnPointId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpawnPointId);
      }
      if (playerResults_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerResults);
      }
      if (Type != global::AiTankArenaServer.PlayerType.Warrior) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (TankId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TankId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      if (SpawnPointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnPointId);
      }
      if (Type != global::AiTankArenaServer.PlayerType.Warrior) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TankId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TankId);
      }
      if (playerResults_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerResults);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
      if (other.SpawnPointId != 0) {
        SpawnPointId = other.SpawnPointId;
      }
      if (other.Type != global::AiTankArenaServer.PlayerType.Warrior) {
        Type = other.Type;
      }
      if (other.TankId != 0) {
        TankId = other.TankId;
      }
      if (other.playerResults_ != null) {
        if (playerResults_ == null) {
          PlayerResults = new global::AiTankArenaServer.PlayerResults();
        }
        PlayerResults.MergeFrom(other.PlayerResults);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsReady = input.ReadBool();
            break;
          }
          case 32: {
            SpawnPointId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (playerResults_ == null) {
              PlayerResults = new global::AiTankArenaServer.PlayerResults();
            }
            input.ReadMessage(PlayerResults);
            break;
          }
          case 48: {
            Type = (global::AiTankArenaServer.PlayerType) input.ReadEnum();
            break;
          }
          case 56: {
            TankId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///结算状态信息
  /// </summary>
  public sealed partial class PlayerResults : pb::IMessage<PlayerResults> {
    private static readonly pb::MessageParser<PlayerResults> _parser = new pb::MessageParser<PlayerResults>(() => new PlayerResults());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.GameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResults(PlayerResults other) : this() {
      isWinner_ = other.isWinner_;
      kill_ = other.kill_;
      death_ = other.death_;
      assistant_ = other.assistant_;
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResults Clone() {
      return new PlayerResults(this);
    }

    /// <summary>Field number for the "isWinner" field.</summary>
    public const int IsWinnerFieldNumber = 1;
    private bool isWinner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWinner {
      get { return isWinner_; }
      set {
        isWinner_ = value;
      }
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 2;
    private int kill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kill {
      get { return kill_; }
      set {
        kill_ = value;
      }
    }

    /// <summary>Field number for the "death" field.</summary>
    public const int DeathFieldNumber = 3;
    private int death_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Death {
      get { return death_; }
      set {
        death_ = value;
      }
    }

    /// <summary>Field number for the "assistant" field.</summary>
    public const int AssistantFieldNumber = 4;
    private int assistant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Assistant {
      get { return assistant_; }
      set {
        assistant_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsWinner != other.IsWinner) return false;
      if (Kill != other.Kill) return false;
      if (Death != other.Death) return false;
      if (Assistant != other.Assistant) return false;
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsWinner != false) hash ^= IsWinner.GetHashCode();
      if (Kill != 0) hash ^= Kill.GetHashCode();
      if (Death != 0) hash ^= Death.GetHashCode();
      if (Assistant != 0) hash ^= Assistant.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWinner != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsWinner);
      }
      if (Kill != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Kill);
      }
      if (Death != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Death);
      }
      if (Assistant != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Assistant);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWinner != false) {
        size += 1 + 1;
      }
      if (Kill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kill);
      }
      if (Death != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Death);
      }
      if (Assistant != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assistant);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerResults other) {
      if (other == null) {
        return;
      }
      if (other.IsWinner != false) {
        IsWinner = other.IsWinner;
      }
      if (other.Kill != 0) {
        Kill = other.Kill;
      }
      if (other.Death != 0) {
        Death = other.Death;
      }
      if (other.Assistant != 0) {
        Assistant = other.Assistant;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsWinner = input.ReadBool();
            break;
          }
          case 16: {
            Kill = input.ReadInt32();
            break;
          }
          case 24: {
            Death = input.ReadInt32();
            break;
          }
          case 32: {
            Assistant = input.ReadInt32();
            break;
          }
          case 40: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tank : pb::IMessage<Tank> {
    private static readonly pb::MessageParser<Tank> _parser = new pb::MessageParser<Tank>(() => new Tank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.GameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tank(Tank other) : this() {
      id_ = other.id_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      hitbox_ = other.hitbox_ != null ? other.hitbox_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tank Clone() {
      return new Tank(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::AiTankArenaServer.Vector2D pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.Vector2D Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::AiTankArenaServer.Vector2D direction_;
    /// <summary>
    ///朝向的方向向量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.Vector2D Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "hitbox" field.</summary>
    public const int HitboxFieldNumber = 4;
    private global::AiTankArenaServer.Rect hitbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.Rect Hitbox {
      get { return hitbox_; }
      set {
        hitbox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(Hitbox, other.Hitbox)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (hitbox_ != null) hash ^= Hitbox.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (hitbox_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hitbox);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (hitbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hitbox);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tank other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::AiTankArenaServer.Vector2D();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::AiTankArenaServer.Vector2D();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.hitbox_ != null) {
        if (hitbox_ == null) {
          Hitbox = new global::AiTankArenaServer.Rect();
        }
        Hitbox.MergeFrom(other.Hitbox);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::AiTankArenaServer.Vector2D();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 26: {
            if (direction_ == null) {
              Direction = new global::AiTankArenaServer.Vector2D();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 34: {
            if (hitbox_ == null) {
              Hitbox = new global::AiTankArenaServer.Rect();
            }
            input.ReadMessage(Hitbox);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Weapon : pb::IMessage<Weapon> {
    private static readonly pb::MessageParser<Weapon> _parser = new pb::MessageParser<Weapon>(() => new Weapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Weapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.GameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon(Weapon other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon Clone() {
      return new Weapon(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::AiTankArenaServer.WeaponType type_ = global::AiTankArenaServer.WeaponType.Cannon;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.WeaponType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::AiTankArenaServer.WeaponState state_ = global::AiTankArenaServer.WeaponState.Idle;
    /// <summary>
    ///武器状态 用于判断是否射击或者显示动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.WeaponState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Weapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Weapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != global::AiTankArenaServer.WeaponType.Cannon) hash ^= Type.GetHashCode();
      if (State != global::AiTankArenaServer.WeaponState.Idle) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type != global::AiTankArenaServer.WeaponType.Cannon) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (State != global::AiTankArenaServer.WeaponState.Idle) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != global::AiTankArenaServer.WeaponType.Cannon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (State != global::AiTankArenaServer.WeaponState.Idle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Weapon other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != global::AiTankArenaServer.WeaponType.Cannon) {
        Type = other.Type;
      }
      if (other.State != global::AiTankArenaServer.WeaponState.Idle) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::AiTankArenaServer.WeaponType) input.ReadEnum();
            break;
          }
          case 24: {
            State = (global::AiTankArenaServer.WeaponState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Projection : pb::IMessage<Projection> {
    private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Projection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection(Projection other) : this() {
      id_ = other.id_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection Clone() {
      return new Projection(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::AiTankArenaServer.Vector2D pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.Vector2D Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::AiTankArenaServer.Vector2D direction_;
    /// <summary>
    ///朝向的方向向量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.Vector2D Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::AiTankArenaServer.ProjectionType type_ = global::AiTankArenaServer.ProjectionType.Ball;
    /// <summary>
    ///投射物类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.ProjectionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Projection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Projection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Type != global::AiTankArenaServer.ProjectionType.Ball) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (Type != global::AiTankArenaServer.ProjectionType.Ball) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Type != global::AiTankArenaServer.ProjectionType.Ball) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Projection other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::AiTankArenaServer.Vector2D();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::AiTankArenaServer.Vector2D();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Type != global::AiTankArenaServer.ProjectionType.Ball) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::AiTankArenaServer.Vector2D();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 26: {
            if (direction_ == null) {
              Direction = new global::AiTankArenaServer.Vector2D();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 32: {
            Type = (global::AiTankArenaServer.ProjectionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
