// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: response.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AiTankArenaServer {

  /// <summary>Holder for reflection information generated from response.proto</summary>
  public static partial class ResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for response.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5yZXNwb25zZS5wcm90bxIRQWlUYW5rQXJlbmFTZXJ2ZXIaCmdhbWUucHJv",
            "dG8ilAEKCUdhbWVTdGF0ZRIrCgVzdGFnZRgBIAEoDjIcLkFpVGFua0FyZW5h",
            "U2VydmVyLkdhbWVTdGFnZRImCgV0YW5rcxgCIAMoCzIXLkFpVGFua0FyZW5h",
            "U2VydmVyLlRhbmsSMgoLcHJvamVjdGlvbnMYAyADKAsyHS5BaVRhbmtBcmVu",
            "YVNlcnZlci5Qcm9qZWN0aW9uIloKClNlcnZlckluZm8SDwoHYnVpbGRJZBgB",
            "IAEoBRIPCgd2ZXJzaW9uGAIgASgJEhIKCnNlcnZlck5hbWUYAyABKAkSFgoO",
            "d2VsY29tZU1lc3NhZ2UYBCABKAkixQEKCFJlc3BvbnNlEikKBnN0YXR1cxgB",
            "IAEoDjIZLkFpVGFua0FyZW5hU2VydmVyLlN0YXR1cxIvCglnYW1lU3RhdGUY",
            "AiABKAsyHC5BaVRhbmtBcmVuYVNlcnZlci5HYW1lU3RhdGUSKgoHcGxheWVy",
            "cxgDIAMoCzIZLkFpVGFua0FyZW5hU2VydmVyLlBsYXllchIxCgpzZXJ2ZXJJ",
            "bmZvGAQgASgLMh0uQWlUYW5rQXJlbmFTZXJ2ZXIuU2VydmVySW5mbyoiCgZT",
            "dGF0dXMSBgoCT0sQABIQCgxTRVJWRVJfRVJST1IQASo9CglHYW1lU3RhZ2US",
            "CwoHV0FJVElORxAAEg0KCUFMTF9SRUFEWRABEgsKB0lOX0dBTUUQAhIHCgNF",
            "TkQQA0I1CjFjbi50ZWFtdGhldm9pZC5BaVRhbmtBcmVuYVNlcnZlci5tZXNz",
            "YWdlLnJlc3BvbnNlUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AiTankArenaServer.GameReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AiTankArenaServer.Status), typeof(global::AiTankArenaServer.GameStage), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.GameState), global::AiTankArenaServer.GameState.Parser, new[]{ "Stage", "Tanks", "Projections" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.ServerInfo), global::AiTankArenaServer.ServerInfo.Parser, new[]{ "BuildId", "Version", "ServerName", "WelcomeMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.Response), global::AiTankArenaServer.Response.Parser, new[]{ "Status", "GameState", "Players", "ServerInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Status {
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("SERVER_ERROR")] ServerError = 1,
  }

  public enum GameStage {
    [pbr::OriginalName("WAITING")] Waiting = 0,
    [pbr::OriginalName("ALL_READY")] AllReady = 1,
    [pbr::OriginalName("IN_GAME")] InGame = 2,
    [pbr::OriginalName("END")] End = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///游戏战局状态
  /// </summary>
  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.ResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      stage_ = other.stage_;
      tanks_ = other.tanks_.Clone();
      projections_ = other.projections_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private global::AiTankArenaServer.GameStage stage_ = global::AiTankArenaServer.GameStage.Waiting;
    /// <summary>
    ///游戏处于哪一阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.GameStage Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "tanks" field.</summary>
    public const int TanksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AiTankArenaServer.Tank> _repeated_tanks_codec
        = pb::FieldCodec.ForMessage(18, global::AiTankArenaServer.Tank.Parser);
    private readonly pbc::RepeatedField<global::AiTankArenaServer.Tank> tanks_ = new pbc::RepeatedField<global::AiTankArenaServer.Tank>();
    /// <summary>
    ///战局中的坦克列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AiTankArenaServer.Tank> Tanks {
      get { return tanks_; }
    }

    /// <summary>Field number for the "projections" field.</summary>
    public const int ProjectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AiTankArenaServer.Projection> _repeated_projections_codec
        = pb::FieldCodec.ForMessage(26, global::AiTankArenaServer.Projection.Parser);
    private readonly pbc::RepeatedField<global::AiTankArenaServer.Projection> projections_ = new pbc::RepeatedField<global::AiTankArenaServer.Projection>();
    /// <summary>
    ///战局中的投射物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AiTankArenaServer.Projection> Projections {
      get { return projections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stage != other.Stage) return false;
      if(!tanks_.Equals(other.tanks_)) return false;
      if(!projections_.Equals(other.projections_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stage != global::AiTankArenaServer.GameStage.Waiting) hash ^= Stage.GetHashCode();
      hash ^= tanks_.GetHashCode();
      hash ^= projections_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stage != global::AiTankArenaServer.GameStage.Waiting) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Stage);
      }
      tanks_.WriteTo(output, _repeated_tanks_codec);
      projections_.WriteTo(output, _repeated_projections_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != global::AiTankArenaServer.GameStage.Waiting) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stage);
      }
      size += tanks_.CalculateSize(_repeated_tanks_codec);
      size += projections_.CalculateSize(_repeated_projections_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.Stage != global::AiTankArenaServer.GameStage.Waiting) {
        Stage = other.Stage;
      }
      tanks_.Add(other.tanks_);
      projections_.Add(other.projections_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Stage = (global::AiTankArenaServer.GameStage) input.ReadEnum();
            break;
          }
          case 18: {
            tanks_.AddEntriesFrom(input, _repeated_tanks_codec);
            break;
          }
          case 26: {
            projections_.AddEntriesFrom(input, _repeated_projections_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.ResponseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      buildId_ = other.buildId_;
      version_ = other.version_;
      serverName_ = other.serverName_;
      welcomeMessage_ = other.welcomeMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 1;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverName" field.</summary>
    public const int ServerNameFieldNumber = 3;
    private string serverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "welcomeMessage" field.</summary>
    public const int WelcomeMessageFieldNumber = 4;
    private string welcomeMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WelcomeMessage {
      get { return welcomeMessage_; }
      set {
        welcomeMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildId != other.BuildId) return false;
      if (Version != other.Version) return false;
      if (ServerName != other.ServerName) return false;
      if (WelcomeMessage != other.WelcomeMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (WelcomeMessage.Length != 0) hash ^= WelcomeMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerName);
      }
      if (WelcomeMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WelcomeMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (WelcomeMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WelcomeMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.WelcomeMessage.Length != 0) {
        WelcomeMessage = other.WelcomeMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuildId = input.ReadInt32();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            ServerName = input.ReadString();
            break;
          }
          case 34: {
            WelcomeMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.ResponseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
      players_ = other.players_.Clone();
      serverInfo_ = other.serverInfo_ != null ? other.serverInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::AiTankArenaServer.Status status_ = global::AiTankArenaServer.Status.Ok;
    /// <summary>
    ///上一操作的返回值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 2;
    private global::AiTankArenaServer.GameState gameState_;
    /// <summary>
    ///游戏战局状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AiTankArenaServer.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::AiTankArenaServer.Player.Parser);
    private readonly pbc::RepeatedField<global::AiTankArenaServer.Player> players_ = new pbc::RepeatedField<global::AiTankArenaServer.Player>();
    /// <summary>
    ///玩家信息 开始和结束阶段有用 ,在战局信息更新时,可被省略
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AiTankArenaServer.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "serverInfo" field.</summary>
    public const int ServerInfoFieldNumber = 4;
    private global::AiTankArenaServer.ServerInfo serverInfo_;
    /// <summary>
    /// 服务器信息,仅在客户端请求服务器信息时才需返回.在战局信息更新时,可被省略
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.ServerInfo ServerInfo {
      get { return serverInfo_; }
      set {
        serverInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(GameState, other.GameState)) return false;
      if(!players_.Equals(other.players_)) return false;
      if (!object.Equals(ServerInfo, other.ServerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::AiTankArenaServer.Status.Ok) hash ^= Status.GetHashCode();
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      hash ^= players_.GetHashCode();
      if (serverInfo_ != null) hash ^= ServerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != global::AiTankArenaServer.Status.Ok) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (gameState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameState);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (serverInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ServerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::AiTankArenaServer.Status.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (serverInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::AiTankArenaServer.Status.Ok) {
        Status = other.Status;
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          GameState = new global::AiTankArenaServer.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      players_.Add(other.players_);
      if (other.serverInfo_ != null) {
        if (serverInfo_ == null) {
          ServerInfo = new global::AiTankArenaServer.ServerInfo();
        }
        ServerInfo.MergeFrom(other.ServerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::AiTankArenaServer.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (gameState_ == null) {
              GameState = new global::AiTankArenaServer.GameState();
            }
            input.ReadMessage(GameState);
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 34: {
            if (serverInfo_ == null) {
              ServerInfo = new global::AiTankArenaServer.ServerInfo();
            }
            input.ReadMessage(ServerInfo);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
