// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: operation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AiTankArenaServer {

  /// <summary>Holder for reflection information generated from operation.proto</summary>
  public static partial class OperationReflection {

    #region Descriptor
    /// <summary>File descriptor for operation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OperationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9vcGVyYXRpb24ucHJvdG8SEUFpVGFua0FyZW5hU2VydmVyGgpnYW1lLnBy",
            "b3RvIqMBCgxKb2luUm9vbUluZm8SDgoGcm9vbUlEGAEgASgFEisKBHR5cGUY",
            "AiABKA4yHS5BaVRhbmtBcmVuYVNlcnZlci5QbGF5ZXJUeXBlEhQKDG15UGxh",
            "eWVyTmFtZRgDIAEoCRIUCgxzcGF3blBvaW50SUQYBCABKAUSKgoHd2VhcG9u",
            "cxgFIAMoCzIZLkFpVGFua0FyZW5hU2VydmVyLldlYXBvbiKDAQoJT3BlcmF0",
            "aW9uEi4KBHR5cGUYASABKA4yIC5BaVRhbmtBcmVuYVNlcnZlci5PcGVyYXRp",
            "b25UeXBlEg8KB21lc3NhZ2UYAiABKAkSNQoMam9pblJvb21JbmZvGAMgASgL",
            "Mh8uQWlUYW5rQXJlbmFTZXJ2ZXIuSm9pblJvb21JbmZvKoABCg1PcGVyYXRp",
            "b25UeXBlEg0KCUdFVF9TVEFURRAAEggKBEpPSU4QARINCglBSV9BQ1RJT04Q",
            "AhIKCgZGUkFOQ0UQAxIICgRIQUxUEAQSCQoFUkVBRFkQBRIKCgZSRUpPSU4Q",
            "BhIPCgtTRVJWRVJfSU5GTxAHEgkKBURFQlVHEAhCNgoyY24udGVhbXRoZXZv",
            "aWQuQWlUYW5rQXJlbmFTZXJ2ZXIubWVzc2FnZS5vcGVyYXRpb25QAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AiTankArenaServer.GameReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AiTankArenaServer.OperationType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.JoinRoomInfo), global::AiTankArenaServer.JoinRoomInfo.Parser, new[]{ "RoomID", "Type", "MyPlayerName", "SpawnPointID", "Weapons" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AiTankArenaServer.Operation), global::AiTankArenaServer.Operation.Parser, new[]{ "Type", "Message", "JoinRoomInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OperationType {
    /// <summary>
    ///获取状态
    /// </summary>
    [pbr::OriginalName("GET_STATE")] GetState = 0,
    /// <summary>
    ///加入战局
    /// </summary>
    [pbr::OriginalName("JOIN")] Join = 1,
    /// <summary>
    ///提交AI行动
    /// </summary>
    [pbr::OriginalName("AI_ACTION")] AiAction = 2,
    /// <summary>
    ///认输
    /// </summary>
    [pbr::OriginalName("FRANCE")] France = 3,
    /// <summary>
    ///本回合挂机
    /// </summary>
    [pbr::OriginalName("HALT")] Halt = 4,
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("READY")] Ready = 5,
    /// <summary>
    ///重连
    /// </summary>
    [pbr::OriginalName("REJOIN")] Rejoin = 6,
    /// <summary>
    ///获取服务器信息
    /// </summary>
    [pbr::OriginalName("SERVER_INFO")] ServerInfo = 7,
    [pbr::OriginalName("DEBUG")] Debug = 8,
  }

  #endregion

  #region Messages
  public sealed partial class JoinRoomInfo : pb::IMessage<JoinRoomInfo> {
    private static readonly pb::MessageParser<JoinRoomInfo> _parser = new pb::MessageParser<JoinRoomInfo>(() => new JoinRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.OperationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomInfo(JoinRoomInfo other) : this() {
      roomID_ = other.roomID_;
      type_ = other.type_;
      myPlayerName_ = other.myPlayerName_;
      spawnPointID_ = other.spawnPointID_;
      weapons_ = other.weapons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomInfo Clone() {
      return new JoinRoomInfo(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    /// <summary>
    ///战局ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::AiTankArenaServer.PlayerType type_ = global::AiTankArenaServer.PlayerType.Warrior;
    /// <summary>
    ///玩家类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.PlayerType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "myPlayerName" field.</summary>
    public const int MyPlayerNameFieldNumber = 3;
    private string myPlayerName_ = "";
    /// <summary>
    ///玩家姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyPlayerName {
      get { return myPlayerName_; }
      set {
        myPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spawnPointID" field.</summary>
    public const int SpawnPointIDFieldNumber = 4;
    private int spawnPointID_;
    /// <summary>
    ///期望的出生点序号 可能被服务器忽略或者重新安排
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnPointID {
      get { return spawnPointID_; }
      set {
        spawnPointID_ = value;
      }
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AiTankArenaServer.Weapon> _repeated_weapons_codec
        = pb::FieldCodec.ForMessage(42, global::AiTankArenaServer.Weapon.Parser);
    private readonly pbc::RepeatedField<global::AiTankArenaServer.Weapon> weapons_ = new pbc::RepeatedField<global::AiTankArenaServer.Weapon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AiTankArenaServer.Weapon> Weapons {
      get { return weapons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (Type != other.Type) return false;
      if (MyPlayerName != other.MyPlayerName) return false;
      if (SpawnPointID != other.SpawnPointID) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Type != global::AiTankArenaServer.PlayerType.Warrior) hash ^= Type.GetHashCode();
      if (MyPlayerName.Length != 0) hash ^= MyPlayerName.GetHashCode();
      if (SpawnPointID != 0) hash ^= SpawnPointID.GetHashCode();
      hash ^= weapons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      if (Type != global::AiTankArenaServer.PlayerType.Warrior) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (MyPlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MyPlayerName);
      }
      if (SpawnPointID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpawnPointID);
      }
      weapons_.WriteTo(output, _repeated_weapons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Type != global::AiTankArenaServer.PlayerType.Warrior) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MyPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyPlayerName);
      }
      if (SpawnPointID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnPointID);
      }
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Type != global::AiTankArenaServer.PlayerType.Warrior) {
        Type = other.Type;
      }
      if (other.MyPlayerName.Length != 0) {
        MyPlayerName = other.MyPlayerName;
      }
      if (other.SpawnPointID != 0) {
        SpawnPointID = other.SpawnPointID;
      }
      weapons_.Add(other.weapons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = (global::AiTankArenaServer.PlayerType) input.ReadEnum();
            break;
          }
          case 26: {
            MyPlayerName = input.ReadString();
            break;
          }
          case 32: {
            SpawnPointID = input.ReadInt32();
            break;
          }
          case 42: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AiTankArenaServer.OperationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      type_ = other.type_;
      message_ = other.message_;
      joinRoomInfo_ = other.joinRoomInfo_ != null ? other.joinRoomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AiTankArenaServer.OperationType type_ = global::AiTankArenaServer.OperationType.GetState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.OperationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinRoomInfo" field.</summary>
    public const int JoinRoomInfoFieldNumber = 3;
    private global::AiTankArenaServer.JoinRoomInfo joinRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AiTankArenaServer.JoinRoomInfo JoinRoomInfo {
      get { return joinRoomInfo_; }
      set {
        joinRoomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(JoinRoomInfo, other.JoinRoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::AiTankArenaServer.OperationType.GetState) hash ^= Type.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (joinRoomInfo_ != null) hash ^= JoinRoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::AiTankArenaServer.OperationType.GetState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (joinRoomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(JoinRoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::AiTankArenaServer.OperationType.GetState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (joinRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::AiTankArenaServer.OperationType.GetState) {
        Type = other.Type;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.joinRoomInfo_ != null) {
        if (joinRoomInfo_ == null) {
          JoinRoomInfo = new global::AiTankArenaServer.JoinRoomInfo();
        }
        JoinRoomInfo.MergeFrom(other.JoinRoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::AiTankArenaServer.OperationType) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (joinRoomInfo_ == null) {
              JoinRoomInfo = new global::AiTankArenaServer.JoinRoomInfo();
            }
            input.ReadMessage(JoinRoomInfo);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
